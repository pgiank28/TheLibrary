package library2;

import java.util.Date;
import java.util.List;

import javax.inject.Inject;
import javax.ws.rs.Consumes;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;

import libraryJPA2.BCrypt;
import libraryJPA2.LibManager;
import libraryJPA2.User;

@Consumes("text/html")
@Produces("text/json")
@Path("/login")
public class Login {
	
	@Inject
	private LibManager lmanager;
	
	@POST
	public String Authentication(@PathParam("username") String uname,@PathParam("password") String password) {
		List<User> authUsers = lmanager.getRegisteredUsers();
		
		for(User u:authUsers) {
			if(u.getUsername().equals(uname) && u.getPassword().equals(BCrypt.bcryptHash(password))) {
				 
				return "User authenticated";
			}
		}
		return "This account doesn't exist";
	}
	
	public String createToken() {
		SignatureAlgorithm signatureAlgorithm = SignatureAlgorithm.HS256;

	    long nowMillis = System.currentTimeMillis();
	    Date now = new Date(nowMillis);

	    //We will sign our JWT with our ApiKey secret
	    byte[] apiKeySecretBytes = DatatypeConverter.parseBase64Binary(SECRET_KEY);
	    Key signingKey = new SecretKeySpec(apiKeySecretBytes, signatureAlgorithm.getJcaName());

	    //Let's set the JWT Claims
	    JwtBuilder builder = Jwts.builder().setId(id)
	            .setIssuedAt(now)
	            .setSubject(subject)
	            .setIssuer(issuer)
	            .signWith(signatureAlgorithm, signingKey);
	  
	    //if it has been specified, let's add the expiration
	    if (ttlMillis > 0) {
	        long expMillis = nowMillis + ttlMillis;
	        Date exp = new Date(expMillis);
	        builder.setExpiration(exp);
	    }  
	  
	    //Builds the JWT and serializes it to a compact, URL-safe string
	    return builder.compact();
	}
}
